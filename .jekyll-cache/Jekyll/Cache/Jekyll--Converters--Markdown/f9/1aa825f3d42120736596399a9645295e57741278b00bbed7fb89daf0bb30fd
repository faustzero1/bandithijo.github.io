I"¬<!-- BANNER OF THE POST -->
<!-- <img class="post&#45;body&#45;img" src="/assets/img/logo/logo_blank_banner.svg" data&#45;echo="#" alt="banner"> -->

<h1 id="prakata">Prakata</h1>

<p>Pada bahasa Ruby, setiap <em>Method</em> menyediakan fungsi ke dalam sebuah <em>Object</em>.</p>

<p><em>Class Method</em> menyediakan fungsi ke dalam <em>Class</em> itu sendiri.</p>

<p>Sedangkan,</p>

<p><em>Instance Method</em> menyediakan fungsi ke satu <em>Instance Class</em> atau <em>Object</em>.</p>

<h1 id="contohnya">Contohnya</h1>

<p>Misalkan kita punya sebuah <em>Class</em> seperti di bawah ini.</p>

<p>Coba tuliskan per barisnya di dalam <strong>irb</strong> saja biar praktis.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">JurusSakti</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">kame_hameha</span>
    <span class="s2">"Jurus dari Class Method"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">kaio_ken</span>
    <span class="s2">"Jurus dari Instance Method"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Dari kode di atas, kita dapat melihat bahwa <em>class JurusSakti</em> memiliki dua buah <em>mehtod</em>.</p>

<p>Yaitu, <em>method kame_hameha</em> dan <em>method kaio_ken</em>.</p>

<p>Untuk membedakan keduanya, coba panggil seperti contoh-contoh di bawah ini.</p>

<pre>
&gt;&gt; JurusSakti.kame_hameha
=&gt; <span style="color:#859900;font-weight:bold;">"Jurus dari Class Method"</span>

&gt;&gt; JurusSakti.kaio_ken
=&gt; <span style="color:red;">NoMethodError: undefined method `kaio_ken' for JurusSakti:Class</span>
</pre>

<p>Terlihat bahwa <em>method kame_hameha</em> berhasil dipanggil, sedangkan <em>method kaio_ken</em> mengalami <em>error</em> berupa <em>undefined method</em> yang artinya method <em>kaio_ken</em> tidak dikenali.</p>

<p><strong>Loh kok bisa?</strong></p>

<p>Ya, tentu saja.</p>

<p>Karena <em>method kame_hameha</em> merupakan <em>Class Method</em>, sehingga dapat langsung dipanggil bersama nama <em>class</em>-nya.</p>

<p><strong>Lalu, Bagaimana cara memanggil method kaio_ken?</strong></p>

<p>Nah, caranya dengan membuat <em>object</em> baru terlebih dahulu, lalu memasukannya ke dalam sebuah <em>variable</em>.</p>

<p>Simak contoh di bawah ini.</p>

<pre>
&gt;&gt; jurus_pamungkas = JurusSakti.new

&gt;&gt; jurus_pamungkas.kame_hameha
=&gt; <span style="color:red;">NoMethodError: undefined method `kame_hameha' for #&lt;JurusSakti:0x000055cd5364e030&gt;</span>

&gt;&gt; jurus_pamungkas.kaio_ken
=&gt; <span style="color:#859900;font-weight:bold;">"Jurus dari Instance Method"</span>
</pre>

<p>Terlihat bahwa <em>method kame_hameha</em> sekarang gagal dipanggil dan megalami <em>error</em> yang sebelumnya dimiliki oleh <em>method kaio_ken</em>.</p>

<p>Hal ini terjadi, karena saat ini, kita telah membuat sebuah <em>object</em> baru dari <em>class JurusSakti</em> (<code class="highlighter-rouge">JurusSakti.new</code>) yang kita masukkan ke dalam sebuah <em>variable</em> dengan nama <code class="highlighter-rouge">jurus_pamungkas</code>. Yang juga dapat disebut sebagai <em>object jurus_pamungkas</em>.</p>

<p>Dengan begini, maka akan sesuai dengan definisi dari sebuah <em>instance method</em> yang menyediakan fungsi untuk <em>object</em>.</p>

<p>Karena saat ini <em>jurus_pamungkas</em> adalah sebuah <em>object</em> dari <em>class JurusSakti</em>, maka <em>jurus_pamungkas</em> dapat menggunakan <em>method</em> yang dapat digunakan oleh <em>object</em> yaitu <em>instance method</em>, yang dalam kasus kita bernama <em>method kaio_ken</em>.</p>

<p>Maka dari itu, <em>method kaio_ken</em> kali ini, berhasil dipanggil.</p>

<h1 id="ringkasan">Ringkasan</h1>

<p>Contoh dari <em>Class Method</em>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">JurusSakti</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">kame_hameha</span>
    <span class="s2">"Jurus dari Instance Method"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Contoh dari <em>Instance Method</em>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">JurusSakti</span>
  <span class="k">def</span> <span class="nf">kaio_ken</span>
    <span class="s2">"Jurus dari Instance Method"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Bahan bacaan lebih lengkap, dapat merujuk pada sumber yang saya sertakan pada referensi di bawah.</p>

<p>Kira-kira segini saja pembahasa kita mengenai perbedaan <em>Class Method</em> dengan <em>Instance Method</em>.</p>

<p>Mudah-mudahan bermanfaat buat teman-teman.</p>

<p>Terima kasih (^_^)v</p>

<h1 id="referensi">Referensi</h1>

<ol>
  <li><a href="http://www.railstips.org/blog/archives/2009/05/11/class-and-instance-methods-in-ruby/" target="_blank">RailsTips - Class and Instance Methods in Ruby</a>
<br />Diakses tanggal: 2019/10/12</li>
</ol>
:ET